# -*- coding: utf-8 -*-
"""latihan5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1elcutMxiorChHMOmPGDlzc7pfp57cUUB
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from sklearn import linear_model
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn import metrics
import matplotlib.pyplot as plt
# %matplotlib inline

df = pd.read_csv("/content/drive/MyDrive/Data_Mining/nilai.csv")

from google.colab import drive
drive.mount('/content/drive')

df.shape

df.describe()

df.plot(x="Hours",y="Scores",style="o")
plt.title("Hours vs Scores")
plt.xlabel("Hours")
plt.ylabel("Scores")
plt.show()

sns.jointplot(x=df['Hours'],y=df['Scores'],data=df,kind='reg')

X = df.iloc[:, :-1].values
y = df.iloc[:, 1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

print(regressor.intercept_)

print(regressor.coef_)

y_pred = regressor.predict(X_test)

df = pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})
df

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('Model R^2 Square Value', metrics.r2_score(y_test, y_pred))

plt.scatter(X_test, y_test)
plt.plot(X_test, y_pred, color='red', linewidth=3)
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.title('Linear Regression')

plt.scatter(regressor.predict(X_test), regressor.predict(X_test)- y_test, c = 'g', s = 30)
plt.hlines(y=0, xmin=0, xmax=100)
plt.title('Residual plot')
plt.ylabel('Residual')

import numpy as np
import pandas as pd
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression

df = pd.read_csv("/content/drive/MyDrive/Data_Mining/50_startup.csv")
df.head()

X = df.iloc[:, :-1]
y = df.iloc[:, 4]

states=pd.get_dummies(X['State'],drop_first=True)
states.head()

X=X.drop('State',axis=1)

X=pd.concat([X,states],axis=1)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

regressor = LinearRegression()
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

from sklearn import metrics
print('Model R^2 Square Value', metrics.r2_score(y_test,y_pred))

import statsmodels.api as sm
import numpy as np
X = X.astype(float)
y = y.astype(float)
X_new = sm.add_constant(X)
X_opt = X_new.iloc[:, [0, 1, 2, 3, 4, 5]]

regressor_OLS = sm.OLS(endog=y, exog=X_opt).fit()
print(regressor_OLS.summary())

import statsmodels.api as sm

X_new = sm.add_constant(X)
X_opt = X_new.iloc[:, [0, 1, 2, 3, 4, 5]]

regressor_OLS = sm.OLS(endog=y, exog=X_opt).fit()
print(regressor_OLS.summary())

import statsmodels.api as sm

X_new = X_new.astype(float)
y = y.astype(float)

X_Opt = X_new.iloc[:, [0, 1, 2, 3, 4]].astype(float)

regressor_OLS = sm.OLS(endog=y, exog=X_Opt).fit()
print(regressor_OLS.summary())

X_Opt = X_new.iloc[:, [0,1,2,3]]
regressor_OLS = sm.OLS (endog = y, exog = X_Opt).fit()
regressor_OLS.summary()

X_Opt = X_new.iloc[:,[0,1,3]]
regressor_OLS = sm.OLS (endog = y, exog = X_Opt).fit()
regressor_OLS.summary()

X_Opt = X_new.iloc[:, [0,1]]
regressor_OLS = sm.OLS (endog = y, exog = X_Opt).fit()
regressor_OLS.summary()

